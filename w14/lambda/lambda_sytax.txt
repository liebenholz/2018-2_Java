
람다식은 아래와 같은 형식으로 적습니다.
	(parameter-list) -> {body}

 
예를 들면 아래와 같습니다.
	n -> n % 2 != 0;         
		// 숫자 n이 주어졌을 때, 그것이 홀수인지 여부를 Boolean 값으로 반환한다.
	(char c) -> c == 'y';     
		// 글자 c가 주어졌을 때, 그것이 ‘y’인지 여부를 Boolean 값으로 반환한다.
	(x, y) -> x + y;           
		// 두 숫자 x, y가 주어졌을 때, 그 합을 반환한다.
	(int a, int b) -> a * a + b * b;     
		// 두 정수 a, b가 주어졌을 때, a 제곱과 b 제곱의 합을 반환한다.
	( ) -> 42      
		// 무조건 42를 반환한다.
	( ) -> { return 3.14 };    
		// 무조건 3.14를 반환한다.
	(String s) -> { System.out.println(s); };        
		// 문자열 s가 주어졌을 때, s를 출력하며 아무 것도 반환하지 않는다.
	( ) -> { System.out.println("Hello World!"); }; 
		// 무조건 “Hello World!”를 출력한다.


파라미터 리스트를 적을 때는 아래 규칙을 따릅니다.
 	- 람다 식은 0 개 이상의 파라미터를 가질 수 있습니다.
	- 파마미터의 타입을 선언해야 합니다. 
	    그러나, 컴파일러가 그 타입을 문맥으로부터 추정할 수 있는 경우에는 타입 선언을 생략할 수 있습니다.
	- 파라미터 리스트는 괄호로 묶고 쉼표로 구분합니다.
	- 파라미터가 필요 없는 경우에는 빈 괄호를 사용합니다.
	- 파라미터가 하나이고 컴파일러가 그 타입을 추정할 수 있는 경우에는 괄호를 생략할 수 있습니다.


람다식의 몸체(body)는 하나의 표현식(expression)이나 문장블록(statement block)입니다.
아래 예에서의 몸체는 하나의 표현식입니다.

	p -> p.getGender () == Person.Sex.MALE
	    && p.getAge ()> = 18
	    && p.getAge () <= 25

이렇게 표현식을 하나 적으면 자바 실행환경은 표현식을 계산하여 그 결과를 반환합니다.


아래 예에서의 몸체는 문장블록(statement block)입니다. 증괄호 안에 return 문장이 하나 들어 있습니다. 
문장은 세미콜론(;)으로 끝납니다.

	p -> {
	    return p.getGender () == Person.Sex.MALE
	        && p.getAge ()> = 18
	        && p.getAge () <= 25;
	}


return 문은 표현식이 아닙니다. 람다식에서 문장(들)을 몸제로 적을 때는 문장(들)을 중괄호로 묶어야 합니다. 
그러나 void 메소드 호출 문장 하나만 있는 경우에는 그 문장을 중괄호로 묶지 않아도 됩니다. 
예를 들어, 다음은 유효한 람다식입니다. 람다식 전체가 하나의 표현식이므로 끝에 세미콜론을 붙이지 않습니다.

	email -> System.out.println (email)
	
	
	